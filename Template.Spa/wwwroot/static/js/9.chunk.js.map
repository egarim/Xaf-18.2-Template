{"version":3,"sources":["../static/js/9.chunk.js","../node_modules/devextreme-react/ui/number-box.js","../node_modules/devextreme/ui/number_box.js","../node_modules/devextreme/ui/number_box/number_box.js","../node_modules/devextreme/ui/number_box/number_box.mask.js","../node_modules/devextreme/ui/number_box/number_box.caret.js","../node_modules/devextreme/ui/number_box/number_box.base.js","../node_modules/devextreme/ui/number_box/number_box.spin.js","../node_modules/devextreme-react/number-box.js"],"names":["webpackJsonp","624","module","exports","__webpack_require__","Object","defineProperty","value","m","p","hasOwnProperty","number_box_1","default","645","655","registerComponent","NumberBoxMask","656","eventsEngine","extend","isNumeric","browser","devices","fitIntoRange","inRange","escapeRegExp","number","maskCaret","getLDMLFormat","getFormat","NumberBoxBase","eventUtils","typeUtils","ensureDefined","defaultValue","inherit","_getDefaultOptions","this","callBase","useMaskBehavior","format","_isDeleteKey","key","_supportedKeys","_useMaskBehavior","that","minus","_revertSign","bind","del","_removeHandler","backspace","leftArrow","_arrowHandler","rightArrow","home","_moveCaretToBoundary","enter","_updateFormattedValue","end","_focusInHandler","e","caret","_caret","start","msie","clearTimeout","_ieCaretTimeout","setTimeout","_focusOutHandler","_focusOutOccurs","_hasValueBeenChanged","inputValue","_getFormatPattern","option","_format","_getInputVal","_parsedValue","_tryParse","_adjustParsedValue","_setTextByParsedValue","trigger","_input","step","text","nextCaret","getCaretWithOffset","isCaretInBoundaries","preventDefault","getCaretInBoundaries","direction","shiftKey","boundaries","getCaretBoundaries","newCaret","_shouldMoveCaret","decimalSeparator","getDecimalSeparator","isDecimalSeparatorNext","charAt","isZeroNext","moveToFloat","_lastKey","zeroToZeroReplace","convertDigits","val","_keyboardHandler","originalEvent","_shouldHandleKey","enteredChar","newValue","_moveCaret","_keyPressHandler","char","slice","_isStub","decimalSeparatorIndex","indexOf","_isNonStubAfter","length","_replaceSelectedText","search","_isValueInRange","valueAfterRemoving","_isPercentFormat","replace","_parse","formatOption","isFunction","formatter","parser","parse","_getFormatForSign","signParts","split","sign","getSign","_removeStubs","excludeComma","thousandsSeparator","getThousandsSeparator","stubs","regExp","RegExp","_truncateToPrecision","maxPrecision","isDefined","strValue","toString","parsedValue","parseFloat","substr","isNaN","selection","editedText","isTextSelected","parsed","_getPrecisionLimits","max","isValueChanged","isDecimalPointRestricted","isUselessCharRestricted","_isValueIncomplete","point","pointIndex","isCaretOnFloat","textParts","floatLength","precision","isPrecisionInRange","min","endsWithZero","_setInputText","getCaretAfterFormat","_toggleEmptinessEventHandler","_formattedValue","_renderInputType","isNumberType","isMobileDevice","real","deviceType","_setInputType","_isChar","str","offset","adjustedCaret","isSpecialChar","ctrlKey","altKey","isMinusKey","_renderInput","_renderFormatter","_clearCache","_detachFormatterEvents","_attachFormatterEvents","off","$input","on","addNamespace","_formatValue","_forceRefreshInputValue","index","isString","escapedDecimalSeparator","regExpString","test","_parseValue","currentFormat","floatPart","_applyRevertedSign","preserveSelectedText","previousText","currentText","getCaretOffset","caretInBoundaries","_removeMinusFromText","formatted","textWithoutMinus","wasMinusRemoved","_renderDisplayText","apply","arguments","_renderValue","clearedText","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","_optionValuesEqual","oldValue","_clean","657","map","join","prefixStubLength","exec","postfixStubLength","_getDigitCountBeforeIndex","_reverseText","reverse","_getDigitPositionByIndex","digitIndex","counter","result","pointPosition","newPointPosition","formattedParts","relativeIndex","digitsBefore","newPosition","positionFromEnd","digitsFromEnd","newPositionFromEnd","newPositionFromBegin","newText","previousBoundaries","658","$","domAdapter","commonUtils","mathUtils","inArray","TextEditor","pointerEvents","SpinButton","messageLocalization","math","Math","FIREFOX_CONTROL_KEYS","upArrow","stopPropagation","_spinUpChangeHandler","downArrow","_spinDownChangeHandler","showSpinButtons","useLargeSpinButtons","mode","invalidValueMessage","_defaultOptionsRules","concat","device","generic","isSimulator","options","platform","_initMarkup","_renderSubmitElement","$element","addClass","_renderContentImpl","_validateValue","setAria","_$submitElement","attr","appendTo","_setSubmitValue","applyServerDecimalSeparator","_getSubmitElement","String","fromCharCode","which","metaKey","_keyPressed","_onMouseWheel","dxEvent","delta","_spinValueChange","Number","_forceValueRender","_renderInputAddons","_renderValueEventName","_toggleDisabledState","_$spinUp","getInstance","_$spinDown","formattedValue","_applyValueFormat","_renderProps","prop","valuemin","valuemax","_renderSpinButtons","spinButtonsVisible","toggleClass","_toggleTouchFriendlyClass","_$spinContainer","remove","_createSpinButtons","prependTo","_buttonsContainer","eventName","down","NAME","pointerDownAction","_createAction","_spinButtonsPointerDownHandler","$spinContainer","event","_createComponent","onChange","getActiveElement","_normalizeInputValue","_correctRounding","regex","isFloatValue","isFloatStep","valueAccuracy","stepAccuracy","accuracy","_round","multiplier","pow","round","_renderValueChangeEvent","_normalizeText","valueHasDigits","_isValueValid","_applyValueBoundaries","validationRequest","fire","editor","isValueIncomplete","isValueCorrect","_replaceCommaWithPoint","_inputIsInvalid","isNumberMode","validityState","get","validity","badInput","_isNumber","isValueValid","isValid","isNumber","validationError","editorSpecific","message","trim","reset","_resumeValueChangeAction","659","Widget","feedbackEvents","holdEvent","Deferred","POINTERUP_EVENT_NAME","up","POINTERCANCEL_EVENT_NAME","cancel","activeStateEnabled","hoverStateEnabled","SPIN_CLASS","_spinIcon","_render","_spinDownHandler","_spinChangeHandler","_createActionByOption","_clearTimer","_feedBackDeferred","lock","_holdTimer","setInterval","document","getDocument","_dispose","resolve","clearInterval","_invalidate","865","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","__","constructor","prototype","create","prop_types_1","component_1","nested_option_1","NumberBox","_super","_this","_WidgetClass","_defaults","_expectedChildren","optionName","isCollectionItem","_instance","enumerable","configurable","Component","propTypes","accessKey","PropTypes","string","bool","disabled","elementAttr","object","focusStateEnabled","oneOfType","func","height","hint","inputAttr","oneOf","onContentReady","onCopy","onCut","onDisposing","onEnterKey","onFocusIn","onFocusOut","onInitialized","onInput","onKeyDown","onKeyPress","onKeyUp","onOptionChanged","onPaste","onValueChanged","placeholder","readOnly","rtlEnabled","showClearButton","stylingMode","tabIndex","validationMessageMode","valueChangeEvent","visible","width","Format","OptionName"],"mappings":"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","file":"static/js/9.chunk.js","sourcesContent":["webpackJsonp([9],{\n\n/***/ 624:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*!\n * devextreme-react\n * Version: 18.2.5\n * Build date: Wed Jan 23 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @deprecated Use 'devextreme-react/number-box' file instead */\n__export(__webpack_require__(865));\nvar number_box_1 = __webpack_require__(865);\nexports.default = number_box_1.default;\n\n\n/***/ }),\n\n/***/ 645:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nmodule.exports = __webpack_require__(655);\r\nmodule.exports.default = module.exports;\r\n\n\n/***/ }),\n\n/***/ 655:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar registerComponent = __webpack_require__(17),\r\n    NumberBoxMask = __webpack_require__(656);\r\nregisterComponent(\"dxNumberBox\", NumberBoxMask);\r\nmodule.exports = NumberBoxMask;\r\n\n\n/***/ }),\n\n/***/ 656:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar eventsEngine = __webpack_require__(7),\r\n    extend = __webpack_require__(3).extend,\r\n    isNumeric = __webpack_require__(4).isNumeric,\r\n    browser = __webpack_require__(72),\r\n    devices = __webpack_require__(14),\r\n    fitIntoRange = __webpack_require__(56).fitIntoRange,\r\n    inRange = __webpack_require__(56).inRange,\r\n    escapeRegExp = __webpack_require__(6).escapeRegExp,\r\n    number = __webpack_require__(300),\r\n    maskCaret = __webpack_require__(657),\r\n    getLDMLFormat = __webpack_require__(308).getFormat,\r\n    NumberBoxBase = __webpack_require__(658),\r\n    eventUtils = __webpack_require__(8),\r\n    typeUtils = __webpack_require__(4);\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\",\r\n    MOVE_FORWARD = 1,\r\n    MOVE_BACKWARD = -1,\r\n    MINUS = \"-\",\r\n    NUMPUD_MINUS_KEY_IE = \"Subtract\",\r\n    INPUT_EVENT = \"input\";\r\nvar ensureDefined = function(value, defaultValue) {\r\n    return void 0 === value ? defaultValue : value\r\n};\r\nvar NumberBoxMask = NumberBoxBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"Delete\" === key || \"Del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        var that = this;\r\n        return extend(this.callBase(), {\r\n            minus: that._revertSign.bind(that),\r\n            del: that._removeHandler.bind(that),\r\n            backspace: that._removeHandler.bind(that),\r\n            leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\r\n            rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\r\n            home: that._moveCaretToBoundary.bind(that, MOVE_FORWARD),\r\n            enter: that._updateFormattedValue.bind(that),\r\n            end: that._moveCaretToBoundary.bind(that, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _focusInHandler: function(e) {\r\n        this.callBase(e);\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            return\r\n        }\r\n        if (browser.msie) {\r\n            clearTimeout(this._ieCaretTimeout);\r\n            this._ieCaretTimeout = setTimeout(this._moveCaretToBoundary.bind(this, MOVE_BACKWARD, e))\r\n        } else {\r\n            this._moveCaretToBoundary(MOVE_BACKWARD, e)\r\n        }\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        this._focusOutOccurs = true;\r\n        if (this._useMaskBehavior()) {\r\n            this._updateFormattedValue()\r\n        }\r\n        this.callBase(e);\r\n        this._focusOutOccurs = false\r\n    },\r\n    _hasValueBeenChanged: function(inputValue) {\r\n        var format = this._getFormatPattern(),\r\n            value = this.option(\"value\"),\r\n            formatted = this._format(value, format) || \"\";\r\n        return formatted !== inputValue\r\n    },\r\n    _updateFormattedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        if (this._hasValueBeenChanged(inputValue)) {\r\n            this._parsedValue = this._tryParse(inputValue, this._caret());\r\n            this._adjustParsedValue();\r\n            this._setTextByParsedValue();\r\n            if (this._parsedValue !== this.option(\"value\")) {\r\n                eventsEngine.trigger(this._input(), \"change\")\r\n            }\r\n        }\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal(),\r\n            format = this._getFormatPattern(),\r\n            nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\r\n        if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e.shiftKey) {\r\n            return\r\n        }\r\n        var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern()),\r\n            newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = number.getDecimalSeparator(),\r\n            isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator,\r\n            isZeroNext = \"0\" === text.charAt(caret.end),\r\n            moveToFloat = this._lastKey === decimalSeparator && isDecimalSeparatorNext,\r\n            zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\r\n        return moveToFloat || zeroToZeroReplace\r\n    },\r\n    _getInputVal: function() {\r\n        return number.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this._lastKey = number.convertDigits(e.originalEvent.key, true);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var text = this._getInputVal(),\r\n            caret = this._caret();\r\n        var enteredChar = this._lastKey === MINUS ? \"\" : this._lastKey,\r\n            newValue = this._tryParse(text, caret, enteredChar);\r\n        if (void 0 === newValue) {\r\n            if (this._lastKey !== MINUS) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n            if (this._shouldMoveCaret(text, caret)) {\r\n                this._moveCaret(1)\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret(),\r\n            text = this._getInputVal(),\r\n            start = caret.start,\r\n            end = caret.end;\r\n        this._lastKey = e.key;\r\n        if (caret.start === caret.end) {\r\n            this._isDeleteKey(e.key) ? end++ : start--\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue()\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                    start: start,\r\n                    end: end\r\n                }, \"\"),\r\n                noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern(),\r\n            noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return noEscapedFormat.indexOf(\"%\") !== -1\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomParser = typeUtils.isFunction(formatOption.formatter),\r\n            parser = isCustomParser ? formatOption.parser : number.parse;\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomFormatter = typeUtils.isFunction(formatOption.formatter),\r\n            formatter = isCustomFormatter ? formatOption.formatter : number.format;\r\n        return formatter(value, format)\r\n    },\r\n    _getFormatPattern: function() {\r\n        var format = this.option(\"format\"),\r\n            isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        if (isLDMLPattern) {\r\n            return format\r\n        } else {\r\n            return getLDMLFormat(function(value) {\r\n                return this._format(value, format)\r\n            }.bind(this))\r\n        }\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern(),\r\n            signParts = format.split(\";\"),\r\n            sign = number.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        return sign < 0 ? signParts[1] : signParts[0]\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text),\r\n            thousandsSeparator = number.getThousandsSeparator(),\r\n            stubs = format.replace(/[#0.,]/g, \"\"),\r\n            regExp = new RegExp(\"[-\" + escapeRegExp((excludeComma ? \"\" : thousandsSeparator) + stubs) + \"]\", \"g\");\r\n        return text.replace(regExp, \"\")\r\n    },\r\n    _truncateToPrecision: function(value, decimalSeparator, maxPrecision) {\r\n        if (typeUtils.isDefined(value)) {\r\n            var strValue = value.toString(),\r\n                decimalSeparatorIndex = strValue.indexOf(decimalSeparator);\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char),\r\n            format = this._getFormatPattern(),\r\n            isTextSelected = selection.start !== selection.end,\r\n            parsed = this._parse(editedText, format),\r\n            maxPrecision = this._getPrecisionLimits(format, editedText).max,\r\n            isValueChanged = parsed !== this._parsedValue,\r\n            decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision,\r\n            isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === editedText) {\r\n            parsed = 0\r\n        }\r\n        if (isNaN(parsed)) {\r\n            return\r\n        }\r\n        var value = null === parsed ? this._parsedValue : parsed;\r\n        parsed = this._truncateToPrecision(value, decimalSeparator, maxPrecision);\r\n        return this._isPercentFormat() ? parsed && parsed / 100 : parsed\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret(),\r\n            point = number.getDecimalSeparator(),\r\n            pointIndex = text.indexOf(point),\r\n            isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start,\r\n            textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length,\r\n            precision = this._getPrecisionLimits(this._getFormatPattern(), text),\r\n            isPrecisionInRange = inRange(floatLength, precision.min, precision.max),\r\n            endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = ensureDefined(this.option(\"min\"), -(1 / 0)),\r\n            max = ensureDefined(this.option(\"max\"), 1 / 0);\r\n        return inRange(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), text, this._caret(), this._getFormatPattern()),\r\n            newValue = number.convertDigits(text);\r\n        this._input().val(newValue);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\"),\r\n            isMobileDevice = \"desktop\" !== devices.real().deviceType;\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(isMobileDevice ? \"tel\" : \"text\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return \"string\" === typeof str && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset),\r\n            adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(e.key),\r\n            isMinusKey = e.key === MINUS,\r\n            useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), this._formatValue.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n        }.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index, text) {\r\n        text = (text || this._getInputVal()).slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator()),\r\n            regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\",\r\n            stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text),\r\n            floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\"),\r\n            minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length,\r\n            maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if (e.key === MINUS || e.key === NUMPUD_MINUS_KEY_IE) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * ensureDefined(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue)) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern(),\r\n                    previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal(),\r\n                    offset = maskCaret.getCaretOffset(previousText, currentText, format);\r\n                caret = maskCaret.getCaretWithOffset(caret, offset);\r\n                var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\r\n                if (browser.msie) {\r\n                    clearTimeout(this._ieCaretTimeout);\r\n                    this._ieCaretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries))\r\n                } else {\r\n                    this._caret(caretInBoundaries)\r\n                }\r\n            }\r\n            if (e.key === NUMPUD_MINUS_KEY_IE) {\r\n                eventsEngine.trigger(this._input(), INPUT_EVENT)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKey === MINUS && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern(),\r\n            parsed = this._parseValue(),\r\n            formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function() {\r\n        var text = this._getInputVal(),\r\n            caret = this._caret(),\r\n            textWithoutMinus = this._removeMinusFromText(text, caret),\r\n            wasMinusRemoved = textWithoutMinus !== text;\r\n        text = textWithoutMinus;\r\n        if (this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = text;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = this._formattedValue !== text;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(text, caret, \"\");\r\n            if (typeUtils.isDefined(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        this.callBase()\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal()),\r\n            parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!isNumeric(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue)\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _optionValuesEqual: function(name, oldValue, newValue) {\r\n        if (\"value\" === name && 0 === oldValue && 0 === newValue) {\r\n            return 1 / oldValue === 1 / newValue\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._parsedValue;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._ieCaretTimeout);\r\n        delete this._ieCaretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nmodule.exports = NumberBoxMask;\r\n\n\n/***/ }),\n\n/***/ 657:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar fitIntoRange = __webpack_require__(56).fitIntoRange,\r\n    escapeRegExp = __webpack_require__(6).escapeRegExp,\r\n    number = __webpack_require__(300);\r\nvar getCaretBoundaries = function(text, format) {\r\n    var signParts = format.split(\";\");\r\n    var sign = number.getSign(text, format);\r\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n    format = signParts[sign < 0 ? 1 : 0];\r\n    var mockEscapedStubs = function(str) {\r\n        return str.replace(/'([^']*)'/g, function(str) {\r\n            return str.split(\"\").map(function() {\r\n                return \" \"\r\n            }).join(\"\").substr(2)\r\n        })\r\n    };\r\n    format = mockEscapedStubs(format);\r\n    var prefixStubLength = /^[^#0\\.,]*/.exec(format)[0].length;\r\n    var postfixStubLength = /[^#0\\.,]*$/.exec(format)[0].length;\r\n    return {\r\n        start: prefixStubLength,\r\n        end: text.length - postfixStubLength\r\n    }\r\n};\r\nvar _getDigitCountBeforeIndex = function(index, text) {\r\n    var decimalSeparator = number.getDecimalSeparator(),\r\n        regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\"),\r\n        textBeforePosition = text.slice(0, index);\r\n    return textBeforePosition.replace(regExp, \"\").length\r\n};\r\nvar _reverseText = function(text) {\r\n    return text.split(\"\").reverse().join(\"\")\r\n};\r\nvar _getDigitPositionByIndex = function(digitIndex, text) {\r\n    if (!digitIndex) {\r\n        return -1\r\n    }\r\n    var regExp = /[0-9]/g,\r\n        counter = 1,\r\n        index = null,\r\n        result = regExp.exec(text);\r\n    while (result) {\r\n        index = result.index;\r\n        if (!digitIndex || counter >= digitIndex) {\r\n            return index\r\n        }\r\n        counter++;\r\n        result = regExp.exec(text)\r\n    }\r\n    return null === index ? text.length : index\r\n};\r\nvar getCaretWithOffset = function(caret, offset) {\r\n    if (void 0 === caret.start) {\r\n        caret = {\r\n            start: caret,\r\n            end: caret\r\n        }\r\n    }\r\n    return {\r\n        start: caret.start + offset,\r\n        end: caret.end + offset\r\n    }\r\n};\r\nvar getCaretAfterFormat = function(text, formatted, caret, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var point = number.getDecimalSeparator(),\r\n        pointPosition = text.indexOf(point),\r\n        newPointPosition = formatted.indexOf(point),\r\n        textParts = text.split(point),\r\n        formattedParts = formatted.split(point),\r\n        isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\r\n    if (isCaretOnFloat) {\r\n        var relativeIndex = caret.start - pointPosition - 1,\r\n            digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]),\r\n            newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\r\n        return getCaretInBoundaries(newPosition, formatted, format)\r\n    } else {\r\n        var positionFromEnd = textParts[0].length - caret.start,\r\n            digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0])),\r\n            newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedParts[0])),\r\n            newPositionFromBegin = formattedParts[0].length - (newPositionFromEnd + 1);\r\n        return getCaretInBoundaries(newPositionFromBegin, formatted, format)\r\n    }\r\n};\r\nvar isCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretInBoundaries(caret, text, format);\r\n    return caret.start >= boundaries.start && caret.end <= boundaries.end\r\n};\r\nvar getCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretBoundaries(text, format),\r\n        adjustedCaret = {\r\n            start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\r\n            end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\r\n        };\r\n    return adjustedCaret\r\n};\r\nvar getCaretOffset = function(previousText, newText, format) {\r\n    var previousBoundaries = getCaretBoundaries(previousText, format),\r\n        newBoundaries = getCaretBoundaries(newText, format);\r\n    return newBoundaries.start - previousBoundaries.start\r\n};\r\nexports.getCaretBoundaries = getCaretBoundaries;\r\nexports.isCaretInBoundaries = isCaretInBoundaries;\r\nexports.getCaretWithOffset = getCaretWithOffset;\r\nexports.getCaretInBoundaries = getCaretInBoundaries;\r\nexports.getCaretAfterFormat = getCaretAfterFormat;\r\nexports.getCaretOffset = getCaretOffset;\r\n\n\n/***/ }),\n\n/***/ 658:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar $ = __webpack_require__(1),\r\n    domAdapter = __webpack_require__(11),\r\n    eventsEngine = __webpack_require__(7),\r\n    commonUtils = __webpack_require__(6),\r\n    mathUtils = __webpack_require__(56),\r\n    extend = __webpack_require__(3).extend,\r\n    inArray = __webpack_require__(16).inArray,\r\n    devices = __webpack_require__(14),\r\n    TextEditor = __webpack_require__(309),\r\n    eventUtils = __webpack_require__(8),\r\n    pointerEvents = __webpack_require__(32),\r\n    SpinButton = __webpack_require__(659),\r\n    messageLocalization = __webpack_require__(26);\r\nvar math = Math;\r\nvar WIDGET_CLASS = \"dx-numberbox\",\r\n    SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\",\r\n    SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\r\nvar FIREFOX_CONTROL_KEYS = [\"Tab\", \"Del\", \"Delete\", \"Backspace\", \"Left\", \"ArrowLeft\", \"Right\", \"ArrowRight\", \"Home\", \"End\", \"Enter\"];\r\nvar NumberBoxBase = TextEditor.inherit({\r\n    _supportedKeys: function() {\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinUpChangeHandler(e)\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinDownChangeHandler(e)\r\n            },\r\n            enter: function() {}\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: 0,\r\n            min: void 0,\r\n            max: void 0,\r\n            step: 1,\r\n            showSpinButtons: false,\r\n            useLargeSpinButtons: true,\r\n            mode: \"text\",\r\n            invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\")\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return devices.real().generic && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                useLargeSpinButtons: false\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return \"generic\" !== devices.real().platform\r\n            },\r\n            options: {\r\n                mode: \"number\"\r\n            }\r\n        }])\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderSubmitElement();\r\n        this.$element().addClass(WIDGET_CLASS);\r\n        this.callBase()\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\r\n        this.setAria(\"role\", \"spinbutton\")\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    },\r\n    _setSubmitValue: function(value) {\r\n        this._$submitElement.val(commonUtils.applyServerDecimalSeparator(value))\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        this.callBase(e);\r\n        var ch = e.key || String.fromCharCode(e.which),\r\n            validCharRegExp = /[\\d.,eE\\-+]|Subtract/,\r\n            isInputCharValid = validCharRegExp.test(ch);\r\n        if (!isInputCharValid) {\r\n            if (e.metaKey || e.ctrlKey || e.key && inArray(e.key, FIREFOX_CONTROL_KEYS) >= 0) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n        this._keyPressed = true\r\n    },\r\n    _onMouseWheel: function(dxEvent) {\r\n        dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent)\r\n    },\r\n    _renderValue: function() {\r\n        var inputValue = this._input().val();\r\n        if (!inputValue.length || Number(inputValue) !== this.option(\"value\")) {\r\n            this._forceValueRender();\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        var value = this.option(\"value\");\r\n        this._renderInputAddons();\r\n        this.setAria(\"valuenow\", value);\r\n        this.option(\"text\", this._input().val())\r\n    },\r\n    _renderValueEventName: function() {\r\n        return this.callBase() + \" keypress\"\r\n    },\r\n    _toggleDisabledState: function(value) {\r\n        if (this._$spinUp) {\r\n            SpinButton.getInstance(this._$spinUp).option(\"disabled\", value)\r\n        }\r\n        if (this._$spinDown) {\r\n            SpinButton.getInstance(this._$spinDown).option(\"disabled\", value)\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _forceValueRender: function() {\r\n        var value = this.option(\"value\"),\r\n            number = Number(value),\r\n            formattedValue = isNaN(number) ? \"\" : this._applyValueFormat(value);\r\n        this._renderDisplayText(formattedValue)\r\n    },\r\n    _applyValueFormat: function(value) {\r\n        return this.option(\"valueFormat\")(value)\r\n    },\r\n    _renderProps: function() {\r\n        this.callBase();\r\n        this._input().prop({\r\n            min: this.option(\"min\"),\r\n            max: this.option(\"max\"),\r\n            step: this.option(\"step\")\r\n        });\r\n        this.setAria({\r\n            valuemin: this.option(\"min\") || \"undefined\",\r\n            valuemax: this.option(\"max\") || \"undefined\"\r\n        })\r\n    },\r\n    _renderInputAddons: function() {\r\n        this.callBase();\r\n        this._renderSpinButtons()\r\n    },\r\n    _renderSpinButtons: function() {\r\n        var spinButtonsVisible = this.option(\"showSpinButtons\");\r\n        this.$element().toggleClass(SPIN_CLASS, spinButtonsVisible);\r\n        this._toggleTouchFriendlyClass();\r\n        if (!spinButtonsVisible) {\r\n            this._$spinContainer && this._$spinContainer.remove();\r\n            this._$spinContainer = null;\r\n            return\r\n        }\r\n        if (!this._$spinContainer) {\r\n            this._$spinContainer = this._createSpinButtons()\r\n        }\r\n        this._$spinContainer.prependTo(this._buttonsContainer())\r\n    },\r\n    _toggleTouchFriendlyClass: function() {\r\n        this.$element().toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, this.option(\"showSpinButtons\") && this.option(\"useLargeSpinButtons\"))\r\n    },\r\n    _createSpinButtons: function() {\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME);\r\n        var pointerDownAction = this._createAction(this._spinButtonsPointerDownHandler.bind(this));\r\n        var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\r\n        eventsEngine.off($spinContainer, eventName);\r\n        eventsEngine.on($spinContainer, eventName, function(e) {\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        });\r\n        this._$spinUp = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinUp, SpinButton, {\r\n            direction: \"up\",\r\n            onChange: this._spinUpChangeHandler.bind(this)\r\n        });\r\n        this._$spinDown = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinDown, SpinButton, {\r\n            direction: \"down\",\r\n            onChange: this._spinDownChangeHandler.bind(this)\r\n        });\r\n        return $spinContainer\r\n    },\r\n    _spinButtonsPointerDownHandler: function() {\r\n        var $input = this._input();\r\n        if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n    },\r\n    _spinUpChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(1, e.event || e)\r\n        }\r\n    },\r\n    _spinDownChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(-1, e.event || e)\r\n        }\r\n    },\r\n    _spinValueChange: function(sign, dxEvent) {\r\n        var value = parseFloat(this._normalizeInputValue()) || 0,\r\n            step = parseFloat(this.option(\"step\"));\r\n        value = this._correctRounding(value, step * sign);\r\n        var min = this.option(\"min\"),\r\n            max = this.option(\"max\");\r\n        if (void 0 !== min) {\r\n            value = Math.max(min, value)\r\n        }\r\n        if (void 0 !== max) {\r\n            value = Math.min(max, value)\r\n        }\r\n        this._saveValueChangeEvent(dxEvent);\r\n        this.option(\"value\", value)\r\n    },\r\n    _correctRounding: function(value, step) {\r\n        var regex = /[,.](.*)/;\r\n        var isFloatValue = regex.test(value),\r\n            isFloatStep = regex.test(step);\r\n        if (isFloatValue || isFloatStep) {\r\n            var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0,\r\n                stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0,\r\n                accuracy = math.max(valueAccuracy, stepAccuracy);\r\n            value = this._round(value + step, accuracy);\r\n            return value\r\n        }\r\n        return value + step\r\n    },\r\n    _round: function(value, precision) {\r\n        precision = precision || 0;\r\n        var multiplier = Math.pow(10, precision);\r\n        value *= multiplier;\r\n        value = Math.round(value) / multiplier;\r\n        return value\r\n    },\r\n    _renderValueChangeEvent: function() {\r\n        this.callBase();\r\n        eventsEngine.on(this._input(), \"focusout\", this._forceRefreshInputValue.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (\"number\" === this.option(\"mode\")) {\r\n            return\r\n        }\r\n        var $input = this._input(),\r\n            formattedValue = this._applyValueFormat(this.option(\"value\"));\r\n        $input.val(null);\r\n        $input.val(formattedValue)\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        var $input = this._input(),\r\n            inputValue = this._normalizeText(),\r\n            value = this._parseValue(inputValue),\r\n            valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\r\n        if (this._isValueValid() && !this._validateValue(value)) {\r\n            $input.val(this._applyValueFormat(value));\r\n            return\r\n        }\r\n        if (valueHasDigits) {\r\n            this.callBase(e, isNaN(value) ? null : value)\r\n        }\r\n        this._applyValueBoundaries(inputValue, value);\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        })\r\n    },\r\n    _applyValueBoundaries: function(inputValue, parsedValue) {\r\n        var isValueIncomplete = this._isValueIncomplete(inputValue),\r\n            isValueCorrect = this._isValueInRange(inputValue);\r\n        if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\r\n            if (Number(inputValue) !== parsedValue) {\r\n                this._input().val(this._applyValueFormat(parsedValue))\r\n            }\r\n        }\r\n    },\r\n    _replaceCommaWithPoint: function(value) {\r\n        return value.replace(\",\", \".\")\r\n    },\r\n    _inputIsInvalid: function() {\r\n        var isNumberMode = \"number\" === this.option(\"mode\");\r\n        var validityState = this._input().get(0).validity;\r\n        return isNumberMode && validityState && validityState.badInput\r\n    },\r\n    _renderDisplayText: function(text) {\r\n        if (this._inputIsInvalid()) {\r\n            return\r\n        }\r\n        this.callBase(text)\r\n    },\r\n    _isValueIncomplete: function(value) {\r\n        var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\r\n        return incompleteRegex.test(value)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _isNumber: function(value) {\r\n        return null !== this._parseValue(value)\r\n    },\r\n    _validateValue: function(value) {\r\n        var inputValue = this._normalizeText(),\r\n            isValueValid = this._isValueValid(),\r\n            isValid = true,\r\n            isNumber = this._isNumber(inputValue);\r\n        if (isNaN(Number(value))) {\r\n            isValid = false\r\n        }\r\n        if (!value && isValueValid) {\r\n            isValid = true\r\n        } else {\r\n            if (!isNumber && !isValueValid) {\r\n                isValid = false\r\n            }\r\n        }\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"invalidValueMessage\")\r\n            }\r\n        });\r\n        return isValid\r\n    },\r\n    _normalizeInputValue: function() {\r\n        return this._parseValue(this._normalizeText())\r\n    },\r\n    _normalizeText: function() {\r\n        var value = this._input().val().trim();\r\n        return this._replaceCommaWithPoint(value)\r\n    },\r\n    _parseValue: function(value) {\r\n        var number = parseFloat(value);\r\n        if (isNaN(number)) {\r\n            return null\r\n        }\r\n        return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    reset: function() {\r\n        this.option(\"value\", null)\r\n    },\r\n    _clean: function() {\r\n        delete this._$spinContainer;\r\n        delete this._$spinUp;\r\n        delete this._$spinDown;\r\n        this.callBase()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._validateValue(args.value);\r\n                this._setSubmitValue(args.value);\r\n                this.callBase(args);\r\n                this._resumeValueChangeAction();\r\n                break;\r\n            case \"step\":\r\n                this._renderProps();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._renderProps();\r\n                this.option(\"value\", this._parseValue(this.option(\"value\")));\r\n                break;\r\n            case \"showSpinButtons\":\r\n                this._renderInputAddons();\r\n                break;\r\n            case \"useLargeSpinButtons\":\r\n                this._toggleTouchFriendlyClass();\r\n                break;\r\n            case \"invalidValueMessage\":\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = NumberBoxBase;\r\n\n\n/***/ }),\n\n/***/ 659:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.spin.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar $ = __webpack_require__(1),\r\n    domAdapter = __webpack_require__(11),\r\n    eventsEngine = __webpack_require__(7),\r\n    Widget = __webpack_require__(43),\r\n    extend = __webpack_require__(3).extend,\r\n    eventUtils = __webpack_require__(8),\r\n    pointerEvents = __webpack_require__(32),\r\n    feedbackEvents = __webpack_require__(126),\r\n    holdEvent = __webpack_require__(173),\r\n    Deferred = __webpack_require__(10).Deferred;\r\nvar SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_BUTTON_CLASS = \"dx-numberbox-spin-button\",\r\n    SPIN_HOLD_DELAY = 100,\r\n    NUMBER_BOX = \"dxNumberBox\",\r\n    POINTERUP_EVENT_NAME = eventUtils.addNamespace(pointerEvents.up, NUMBER_BOX),\r\n    POINTERCANCEL_EVENT_NAME = eventUtils.addNamespace(pointerEvents.cancel, NUMBER_BOX);\r\nvar SpinButton = Widget.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            direction: \"up\",\r\n            onChange: null,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true\r\n        })\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        var direction = SPIN_CLASS + \"-\" + this.option(\"direction\");\r\n        this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);\r\n        this._spinIcon = $(\"<div>\").addClass(direction + \"-icon\").appendTo(this.$element())\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME),\r\n            $element = this.$element();\r\n        eventsEngine.off($element, eventName);\r\n        eventsEngine.on($element, eventName, this._spinDownHandler.bind(this));\r\n        this._spinChangeHandler = this._createActionByOption(\"onChange\")\r\n    },\r\n    _spinDownHandler: function(e) {\r\n        e.preventDefault();\r\n        this._clearTimer();\r\n        eventsEngine.on(this.$element(), holdEvent.name, function() {\r\n            this._feedBackDeferred = new Deferred;\r\n            feedbackEvents.lock(this._feedBackDeferred);\r\n            this._spinChangeHandler({\r\n                event: e\r\n            });\r\n            this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {\r\n                event: e\r\n            })\r\n        }.bind(this));\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.on(document, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));\r\n        eventsEngine.on(document, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));\r\n        this._spinChangeHandler({\r\n            event: e\r\n        })\r\n    },\r\n    _dispose: function() {\r\n        this._clearTimer();\r\n        this.callBase()\r\n    },\r\n    _clearTimer: function() {\r\n        eventsEngine.off(this.$element(), holdEvent.name);\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.off(document, POINTERUP_EVENT_NAME);\r\n        eventsEngine.off(document, POINTERCANCEL_EVENT_NAME);\r\n        if (this._feedBackDeferred) {\r\n            this._feedBackDeferred.resolve()\r\n        }\r\n        if (this._holdTimer) {\r\n            clearInterval(this._holdTimer)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"onChange\":\r\n            case \"direction\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = SpinButton;\r\n\n\n/***/ }),\n\n/***/ 865:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*!\n * devextreme-react\n * Version: 18.2.5\n * Build date: Wed Jan 23 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar number_box_1 = __webpack_require__(645);\nvar prop_types_1 = __webpack_require__(15);\nvar component_1 = __webpack_require__(38);\nvar nested_option_1 = __webpack_require__(51);\nvar NumberBox = /** @class */ (function (_super) {\n    __extends(NumberBox, _super);\n    function NumberBox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._WidgetClass = number_box_1.default;\n        _this._defaults = {\n            defaultValue: \"value\"\n        };\n        _this._expectedChildren = {\n            format: { optionName: \"format\", isCollectionItem: false }\n        };\n        return _this;\n    }\n    Object.defineProperty(NumberBox.prototype, \"instance\", {\n        get: function () {\n            return this._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NumberBox;\n}(component_1.Component));\nexports.NumberBox = NumberBox;\nNumberBox.propTypes = {\n    accessKey: prop_types_1.PropTypes.string,\n    activeStateEnabled: prop_types_1.PropTypes.bool,\n    disabled: prop_types_1.PropTypes.bool,\n    elementAttr: prop_types_1.PropTypes.object,\n    focusStateEnabled: prop_types_1.PropTypes.bool,\n    format: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.object,\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.string\n    ]),\n    height: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ]),\n    hint: prop_types_1.PropTypes.string,\n    hoverStateEnabled: prop_types_1.PropTypes.bool,\n    inputAttr: prop_types_1.PropTypes.object,\n    invalidValueMessage: prop_types_1.PropTypes.string,\n    isValid: prop_types_1.PropTypes.bool,\n    max: prop_types_1.PropTypes.number,\n    min: prop_types_1.PropTypes.number,\n    mode: prop_types_1.PropTypes.oneOf([\n        \"number\",\n        \"text\",\n        \"tel\"\n    ]),\n    name: prop_types_1.PropTypes.string,\n    onChange: prop_types_1.PropTypes.func,\n    onContentReady: prop_types_1.PropTypes.func,\n    onCopy: prop_types_1.PropTypes.func,\n    onCut: prop_types_1.PropTypes.func,\n    onDisposing: prop_types_1.PropTypes.func,\n    onEnterKey: prop_types_1.PropTypes.func,\n    onFocusIn: prop_types_1.PropTypes.func,\n    onFocusOut: prop_types_1.PropTypes.func,\n    onInitialized: prop_types_1.PropTypes.func,\n    onInput: prop_types_1.PropTypes.func,\n    onKeyDown: prop_types_1.PropTypes.func,\n    onKeyPress: prop_types_1.PropTypes.func,\n    onKeyUp: prop_types_1.PropTypes.func,\n    onOptionChanged: prop_types_1.PropTypes.func,\n    onPaste: prop_types_1.PropTypes.func,\n    onValueChanged: prop_types_1.PropTypes.func,\n    placeholder: prop_types_1.PropTypes.string,\n    readOnly: prop_types_1.PropTypes.bool,\n    rtlEnabled: prop_types_1.PropTypes.bool,\n    showClearButton: prop_types_1.PropTypes.bool,\n    showSpinButtons: prop_types_1.PropTypes.bool,\n    step: prop_types_1.PropTypes.number,\n    stylingMode: prop_types_1.PropTypes.oneOf([\n        \"outlined\",\n        \"underlined\",\n        \"filled\"\n    ]),\n    tabIndex: prop_types_1.PropTypes.number,\n    text: prop_types_1.PropTypes.string,\n    useLargeSpinButtons: prop_types_1.PropTypes.bool,\n    validationError: prop_types_1.PropTypes.object,\n    validationMessageMode: prop_types_1.PropTypes.oneOf([\n        \"always\",\n        \"auto\"\n    ]),\n    value: prop_types_1.PropTypes.number,\n    valueChangeEvent: prop_types_1.PropTypes.string,\n    visible: prop_types_1.PropTypes.bool,\n    width: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ])\n};\n// tslint:disable:max-classes-per-file\n// owners:\n// NumberBox\nvar Format = /** @class */ (function (_super) {\n    __extends(Format, _super);\n    function Format() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Format.OptionName = \"format\";\n    return Format;\n}(nested_option_1.default));\nexports.Format = Format;\nexports.default = NumberBox;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/9.chunk.js","/*!\n * devextreme-react\n * Version: 18.2.5\n * Build date: Wed Jan 23 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @deprecated Use 'devextreme-react/number-box' file instead */\n__export(require(\"../number-box\"));\nvar number_box_1 = require(\"../number-box\");\nexports.default = number_box_1.default;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme-react/ui/number-box.js\n// module id = 624\n// module chunks = 9","/**\r\n * DevExtreme (ui/number_box.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nmodule.exports = require(\"./number_box/number_box\");\r\nmodule.exports.default = module.exports;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box.js\n// module id = 645\n// module chunks = 1 4 5 6 9","/**\r\n * DevExtreme (ui/number_box/number_box.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar registerComponent = require(\"../../core/component_registrator\"),\r\n    NumberBoxMask = require(\"./number_box.mask\");\r\nregisterComponent(\"dxNumberBox\", NumberBoxMask);\r\nmodule.exports = NumberBoxMask;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.js\n// module id = 655\n// module chunks = 1 4 5 6 9","/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar eventsEngine = require(\"../../events/core/events_engine\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    isNumeric = require(\"../../core/utils/type\").isNumeric,\r\n    browser = require(\"../../core/utils/browser\"),\r\n    devices = require(\"../../core/devices\"),\r\n    fitIntoRange = require(\"../../core/utils/math\").fitIntoRange,\r\n    inRange = require(\"../../core/utils/math\").inRange,\r\n    escapeRegExp = require(\"../../core/utils/common\").escapeRegExp,\r\n    number = require(\"../../localization/number\"),\r\n    maskCaret = require(\"./number_box.caret\"),\r\n    getLDMLFormat = require(\"../../localization/ldml/number\").getFormat,\r\n    NumberBoxBase = require(\"./number_box.base\"),\r\n    eventUtils = require(\"../../events/utils\"),\r\n    typeUtils = require(\"../../core/utils/type\");\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\",\r\n    MOVE_FORWARD = 1,\r\n    MOVE_BACKWARD = -1,\r\n    MINUS = \"-\",\r\n    NUMPUD_MINUS_KEY_IE = \"Subtract\",\r\n    INPUT_EVENT = \"input\";\r\nvar ensureDefined = function(value, defaultValue) {\r\n    return void 0 === value ? defaultValue : value\r\n};\r\nvar NumberBoxMask = NumberBoxBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"Delete\" === key || \"Del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        var that = this;\r\n        return extend(this.callBase(), {\r\n            minus: that._revertSign.bind(that),\r\n            del: that._removeHandler.bind(that),\r\n            backspace: that._removeHandler.bind(that),\r\n            leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\r\n            rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\r\n            home: that._moveCaretToBoundary.bind(that, MOVE_FORWARD),\r\n            enter: that._updateFormattedValue.bind(that),\r\n            end: that._moveCaretToBoundary.bind(that, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _focusInHandler: function(e) {\r\n        this.callBase(e);\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            return\r\n        }\r\n        if (browser.msie) {\r\n            clearTimeout(this._ieCaretTimeout);\r\n            this._ieCaretTimeout = setTimeout(this._moveCaretToBoundary.bind(this, MOVE_BACKWARD, e))\r\n        } else {\r\n            this._moveCaretToBoundary(MOVE_BACKWARD, e)\r\n        }\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        this._focusOutOccurs = true;\r\n        if (this._useMaskBehavior()) {\r\n            this._updateFormattedValue()\r\n        }\r\n        this.callBase(e);\r\n        this._focusOutOccurs = false\r\n    },\r\n    _hasValueBeenChanged: function(inputValue) {\r\n        var format = this._getFormatPattern(),\r\n            value = this.option(\"value\"),\r\n            formatted = this._format(value, format) || \"\";\r\n        return formatted !== inputValue\r\n    },\r\n    _updateFormattedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        if (this._hasValueBeenChanged(inputValue)) {\r\n            this._parsedValue = this._tryParse(inputValue, this._caret());\r\n            this._adjustParsedValue();\r\n            this._setTextByParsedValue();\r\n            if (this._parsedValue !== this.option(\"value\")) {\r\n                eventsEngine.trigger(this._input(), \"change\")\r\n            }\r\n        }\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal(),\r\n            format = this._getFormatPattern(),\r\n            nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\r\n        if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e.shiftKey) {\r\n            return\r\n        }\r\n        var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern()),\r\n            newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = number.getDecimalSeparator(),\r\n            isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator,\r\n            isZeroNext = \"0\" === text.charAt(caret.end),\r\n            moveToFloat = this._lastKey === decimalSeparator && isDecimalSeparatorNext,\r\n            zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\r\n        return moveToFloat || zeroToZeroReplace\r\n    },\r\n    _getInputVal: function() {\r\n        return number.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this._lastKey = number.convertDigits(e.originalEvent.key, true);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var text = this._getInputVal(),\r\n            caret = this._caret();\r\n        var enteredChar = this._lastKey === MINUS ? \"\" : this._lastKey,\r\n            newValue = this._tryParse(text, caret, enteredChar);\r\n        if (void 0 === newValue) {\r\n            if (this._lastKey !== MINUS) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n            if (this._shouldMoveCaret(text, caret)) {\r\n                this._moveCaret(1)\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret(),\r\n            text = this._getInputVal(),\r\n            start = caret.start,\r\n            end = caret.end;\r\n        this._lastKey = e.key;\r\n        if (caret.start === caret.end) {\r\n            this._isDeleteKey(e.key) ? end++ : start--\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue()\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                    start: start,\r\n                    end: end\r\n                }, \"\"),\r\n                noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern(),\r\n            noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return noEscapedFormat.indexOf(\"%\") !== -1\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomParser = typeUtils.isFunction(formatOption.formatter),\r\n            parser = isCustomParser ? formatOption.parser : number.parse;\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomFormatter = typeUtils.isFunction(formatOption.formatter),\r\n            formatter = isCustomFormatter ? formatOption.formatter : number.format;\r\n        return formatter(value, format)\r\n    },\r\n    _getFormatPattern: function() {\r\n        var format = this.option(\"format\"),\r\n            isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        if (isLDMLPattern) {\r\n            return format\r\n        } else {\r\n            return getLDMLFormat(function(value) {\r\n                return this._format(value, format)\r\n            }.bind(this))\r\n        }\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern(),\r\n            signParts = format.split(\";\"),\r\n            sign = number.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        return sign < 0 ? signParts[1] : signParts[0]\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text),\r\n            thousandsSeparator = number.getThousandsSeparator(),\r\n            stubs = format.replace(/[#0.,]/g, \"\"),\r\n            regExp = new RegExp(\"[-\" + escapeRegExp((excludeComma ? \"\" : thousandsSeparator) + stubs) + \"]\", \"g\");\r\n        return text.replace(regExp, \"\")\r\n    },\r\n    _truncateToPrecision: function(value, decimalSeparator, maxPrecision) {\r\n        if (typeUtils.isDefined(value)) {\r\n            var strValue = value.toString(),\r\n                decimalSeparatorIndex = strValue.indexOf(decimalSeparator);\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char),\r\n            format = this._getFormatPattern(),\r\n            isTextSelected = selection.start !== selection.end,\r\n            parsed = this._parse(editedText, format),\r\n            maxPrecision = this._getPrecisionLimits(format, editedText).max,\r\n            isValueChanged = parsed !== this._parsedValue,\r\n            decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision,\r\n            isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === editedText) {\r\n            parsed = 0\r\n        }\r\n        if (isNaN(parsed)) {\r\n            return\r\n        }\r\n        var value = null === parsed ? this._parsedValue : parsed;\r\n        parsed = this._truncateToPrecision(value, decimalSeparator, maxPrecision);\r\n        return this._isPercentFormat() ? parsed && parsed / 100 : parsed\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret(),\r\n            point = number.getDecimalSeparator(),\r\n            pointIndex = text.indexOf(point),\r\n            isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start,\r\n            textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length,\r\n            precision = this._getPrecisionLimits(this._getFormatPattern(), text),\r\n            isPrecisionInRange = inRange(floatLength, precision.min, precision.max),\r\n            endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = ensureDefined(this.option(\"min\"), -(1 / 0)),\r\n            max = ensureDefined(this.option(\"max\"), 1 / 0);\r\n        return inRange(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), text, this._caret(), this._getFormatPattern()),\r\n            newValue = number.convertDigits(text);\r\n        this._input().val(newValue);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\"),\r\n            isMobileDevice = \"desktop\" !== devices.real().deviceType;\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(isMobileDevice ? \"tel\" : \"text\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return \"string\" === typeof str && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset),\r\n            adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(e.key),\r\n            isMinusKey = e.key === MINUS,\r\n            useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), this._formatValue.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n        }.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index, text) {\r\n        text = (text || this._getInputVal()).slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator()),\r\n            regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\",\r\n            stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text),\r\n            floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\"),\r\n            minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length,\r\n            maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if (e.key === MINUS || e.key === NUMPUD_MINUS_KEY_IE) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * ensureDefined(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue)) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern(),\r\n                    previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal(),\r\n                    offset = maskCaret.getCaretOffset(previousText, currentText, format);\r\n                caret = maskCaret.getCaretWithOffset(caret, offset);\r\n                var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\r\n                if (browser.msie) {\r\n                    clearTimeout(this._ieCaretTimeout);\r\n                    this._ieCaretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries))\r\n                } else {\r\n                    this._caret(caretInBoundaries)\r\n                }\r\n            }\r\n            if (e.key === NUMPUD_MINUS_KEY_IE) {\r\n                eventsEngine.trigger(this._input(), INPUT_EVENT)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKey === MINUS && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern(),\r\n            parsed = this._parseValue(),\r\n            formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function() {\r\n        var text = this._getInputVal(),\r\n            caret = this._caret(),\r\n            textWithoutMinus = this._removeMinusFromText(text, caret),\r\n            wasMinusRemoved = textWithoutMinus !== text;\r\n        text = textWithoutMinus;\r\n        if (this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = text;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = this._formattedValue !== text;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(text, caret, \"\");\r\n            if (typeUtils.isDefined(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        this.callBase()\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal()),\r\n            parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!isNumeric(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue)\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _optionValuesEqual: function(name, oldValue, newValue) {\r\n        if (\"value\" === name && 0 === oldValue && 0 === newValue) {\r\n            return 1 / oldValue === 1 / newValue\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._parsedValue;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._ieCaretTimeout);\r\n        delete this._ieCaretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nmodule.exports = NumberBoxMask;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.mask.js\n// module id = 656\n// module chunks = 1 4 5 6 9","/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar fitIntoRange = require(\"../../core/utils/math\").fitIntoRange,\r\n    escapeRegExp = require(\"../../core/utils/common\").escapeRegExp,\r\n    number = require(\"../../localization/number\");\r\nvar getCaretBoundaries = function(text, format) {\r\n    var signParts = format.split(\";\");\r\n    var sign = number.getSign(text, format);\r\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n    format = signParts[sign < 0 ? 1 : 0];\r\n    var mockEscapedStubs = function(str) {\r\n        return str.replace(/'([^']*)'/g, function(str) {\r\n            return str.split(\"\").map(function() {\r\n                return \" \"\r\n            }).join(\"\").substr(2)\r\n        })\r\n    };\r\n    format = mockEscapedStubs(format);\r\n    var prefixStubLength = /^[^#0\\.,]*/.exec(format)[0].length;\r\n    var postfixStubLength = /[^#0\\.,]*$/.exec(format)[0].length;\r\n    return {\r\n        start: prefixStubLength,\r\n        end: text.length - postfixStubLength\r\n    }\r\n};\r\nvar _getDigitCountBeforeIndex = function(index, text) {\r\n    var decimalSeparator = number.getDecimalSeparator(),\r\n        regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\"),\r\n        textBeforePosition = text.slice(0, index);\r\n    return textBeforePosition.replace(regExp, \"\").length\r\n};\r\nvar _reverseText = function(text) {\r\n    return text.split(\"\").reverse().join(\"\")\r\n};\r\nvar _getDigitPositionByIndex = function(digitIndex, text) {\r\n    if (!digitIndex) {\r\n        return -1\r\n    }\r\n    var regExp = /[0-9]/g,\r\n        counter = 1,\r\n        index = null,\r\n        result = regExp.exec(text);\r\n    while (result) {\r\n        index = result.index;\r\n        if (!digitIndex || counter >= digitIndex) {\r\n            return index\r\n        }\r\n        counter++;\r\n        result = regExp.exec(text)\r\n    }\r\n    return null === index ? text.length : index\r\n};\r\nvar getCaretWithOffset = function(caret, offset) {\r\n    if (void 0 === caret.start) {\r\n        caret = {\r\n            start: caret,\r\n            end: caret\r\n        }\r\n    }\r\n    return {\r\n        start: caret.start + offset,\r\n        end: caret.end + offset\r\n    }\r\n};\r\nvar getCaretAfterFormat = function(text, formatted, caret, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var point = number.getDecimalSeparator(),\r\n        pointPosition = text.indexOf(point),\r\n        newPointPosition = formatted.indexOf(point),\r\n        textParts = text.split(point),\r\n        formattedParts = formatted.split(point),\r\n        isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\r\n    if (isCaretOnFloat) {\r\n        var relativeIndex = caret.start - pointPosition - 1,\r\n            digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]),\r\n            newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\r\n        return getCaretInBoundaries(newPosition, formatted, format)\r\n    } else {\r\n        var positionFromEnd = textParts[0].length - caret.start,\r\n            digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0])),\r\n            newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedParts[0])),\r\n            newPositionFromBegin = formattedParts[0].length - (newPositionFromEnd + 1);\r\n        return getCaretInBoundaries(newPositionFromBegin, formatted, format)\r\n    }\r\n};\r\nvar isCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretInBoundaries(caret, text, format);\r\n    return caret.start >= boundaries.start && caret.end <= boundaries.end\r\n};\r\nvar getCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretBoundaries(text, format),\r\n        adjustedCaret = {\r\n            start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\r\n            end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\r\n        };\r\n    return adjustedCaret\r\n};\r\nvar getCaretOffset = function(previousText, newText, format) {\r\n    var previousBoundaries = getCaretBoundaries(previousText, format),\r\n        newBoundaries = getCaretBoundaries(newText, format);\r\n    return newBoundaries.start - previousBoundaries.start\r\n};\r\nexports.getCaretBoundaries = getCaretBoundaries;\r\nexports.isCaretInBoundaries = isCaretInBoundaries;\r\nexports.getCaretWithOffset = getCaretWithOffset;\r\nexports.getCaretInBoundaries = getCaretInBoundaries;\r\nexports.getCaretAfterFormat = getCaretAfterFormat;\r\nexports.getCaretOffset = getCaretOffset;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.caret.js\n// module id = 657\n// module chunks = 1 4 5 6 9","/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    domAdapter = require(\"../../core/dom_adapter\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    commonUtils = require(\"../../core/utils/common\"),\r\n    mathUtils = require(\"../../core/utils/math\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    devices = require(\"../../core/devices\"),\r\n    TextEditor = require(\"../text_box/ui.text_editor\"),\r\n    eventUtils = require(\"../../events/utils\"),\r\n    pointerEvents = require(\"../../events/pointer\"),\r\n    SpinButton = require(\"./number_box.spin\"),\r\n    messageLocalization = require(\"../../localization/message\");\r\nvar math = Math;\r\nvar WIDGET_CLASS = \"dx-numberbox\",\r\n    SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\",\r\n    SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\r\nvar FIREFOX_CONTROL_KEYS = [\"Tab\", \"Del\", \"Delete\", \"Backspace\", \"Left\", \"ArrowLeft\", \"Right\", \"ArrowRight\", \"Home\", \"End\", \"Enter\"];\r\nvar NumberBoxBase = TextEditor.inherit({\r\n    _supportedKeys: function() {\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinUpChangeHandler(e)\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinDownChangeHandler(e)\r\n            },\r\n            enter: function() {}\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: 0,\r\n            min: void 0,\r\n            max: void 0,\r\n            step: 1,\r\n            showSpinButtons: false,\r\n            useLargeSpinButtons: true,\r\n            mode: \"text\",\r\n            invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\")\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return devices.real().generic && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                useLargeSpinButtons: false\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return \"generic\" !== devices.real().platform\r\n            },\r\n            options: {\r\n                mode: \"number\"\r\n            }\r\n        }])\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderSubmitElement();\r\n        this.$element().addClass(WIDGET_CLASS);\r\n        this.callBase()\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\r\n        this.setAria(\"role\", \"spinbutton\")\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    },\r\n    _setSubmitValue: function(value) {\r\n        this._$submitElement.val(commonUtils.applyServerDecimalSeparator(value))\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        this.callBase(e);\r\n        var ch = e.key || String.fromCharCode(e.which),\r\n            validCharRegExp = /[\\d.,eE\\-+]|Subtract/,\r\n            isInputCharValid = validCharRegExp.test(ch);\r\n        if (!isInputCharValid) {\r\n            if (e.metaKey || e.ctrlKey || e.key && inArray(e.key, FIREFOX_CONTROL_KEYS) >= 0) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n        this._keyPressed = true\r\n    },\r\n    _onMouseWheel: function(dxEvent) {\r\n        dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent)\r\n    },\r\n    _renderValue: function() {\r\n        var inputValue = this._input().val();\r\n        if (!inputValue.length || Number(inputValue) !== this.option(\"value\")) {\r\n            this._forceValueRender();\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        var value = this.option(\"value\");\r\n        this._renderInputAddons();\r\n        this.setAria(\"valuenow\", value);\r\n        this.option(\"text\", this._input().val())\r\n    },\r\n    _renderValueEventName: function() {\r\n        return this.callBase() + \" keypress\"\r\n    },\r\n    _toggleDisabledState: function(value) {\r\n        if (this._$spinUp) {\r\n            SpinButton.getInstance(this._$spinUp).option(\"disabled\", value)\r\n        }\r\n        if (this._$spinDown) {\r\n            SpinButton.getInstance(this._$spinDown).option(\"disabled\", value)\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _forceValueRender: function() {\r\n        var value = this.option(\"value\"),\r\n            number = Number(value),\r\n            formattedValue = isNaN(number) ? \"\" : this._applyValueFormat(value);\r\n        this._renderDisplayText(formattedValue)\r\n    },\r\n    _applyValueFormat: function(value) {\r\n        return this.option(\"valueFormat\")(value)\r\n    },\r\n    _renderProps: function() {\r\n        this.callBase();\r\n        this._input().prop({\r\n            min: this.option(\"min\"),\r\n            max: this.option(\"max\"),\r\n            step: this.option(\"step\")\r\n        });\r\n        this.setAria({\r\n            valuemin: this.option(\"min\") || \"undefined\",\r\n            valuemax: this.option(\"max\") || \"undefined\"\r\n        })\r\n    },\r\n    _renderInputAddons: function() {\r\n        this.callBase();\r\n        this._renderSpinButtons()\r\n    },\r\n    _renderSpinButtons: function() {\r\n        var spinButtonsVisible = this.option(\"showSpinButtons\");\r\n        this.$element().toggleClass(SPIN_CLASS, spinButtonsVisible);\r\n        this._toggleTouchFriendlyClass();\r\n        if (!spinButtonsVisible) {\r\n            this._$spinContainer && this._$spinContainer.remove();\r\n            this._$spinContainer = null;\r\n            return\r\n        }\r\n        if (!this._$spinContainer) {\r\n            this._$spinContainer = this._createSpinButtons()\r\n        }\r\n        this._$spinContainer.prependTo(this._buttonsContainer())\r\n    },\r\n    _toggleTouchFriendlyClass: function() {\r\n        this.$element().toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, this.option(\"showSpinButtons\") && this.option(\"useLargeSpinButtons\"))\r\n    },\r\n    _createSpinButtons: function() {\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME);\r\n        var pointerDownAction = this._createAction(this._spinButtonsPointerDownHandler.bind(this));\r\n        var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\r\n        eventsEngine.off($spinContainer, eventName);\r\n        eventsEngine.on($spinContainer, eventName, function(e) {\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        });\r\n        this._$spinUp = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinUp, SpinButton, {\r\n            direction: \"up\",\r\n            onChange: this._spinUpChangeHandler.bind(this)\r\n        });\r\n        this._$spinDown = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinDown, SpinButton, {\r\n            direction: \"down\",\r\n            onChange: this._spinDownChangeHandler.bind(this)\r\n        });\r\n        return $spinContainer\r\n    },\r\n    _spinButtonsPointerDownHandler: function() {\r\n        var $input = this._input();\r\n        if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n    },\r\n    _spinUpChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(1, e.event || e)\r\n        }\r\n    },\r\n    _spinDownChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(-1, e.event || e)\r\n        }\r\n    },\r\n    _spinValueChange: function(sign, dxEvent) {\r\n        var value = parseFloat(this._normalizeInputValue()) || 0,\r\n            step = parseFloat(this.option(\"step\"));\r\n        value = this._correctRounding(value, step * sign);\r\n        var min = this.option(\"min\"),\r\n            max = this.option(\"max\");\r\n        if (void 0 !== min) {\r\n            value = Math.max(min, value)\r\n        }\r\n        if (void 0 !== max) {\r\n            value = Math.min(max, value)\r\n        }\r\n        this._saveValueChangeEvent(dxEvent);\r\n        this.option(\"value\", value)\r\n    },\r\n    _correctRounding: function(value, step) {\r\n        var regex = /[,.](.*)/;\r\n        var isFloatValue = regex.test(value),\r\n            isFloatStep = regex.test(step);\r\n        if (isFloatValue || isFloatStep) {\r\n            var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0,\r\n                stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0,\r\n                accuracy = math.max(valueAccuracy, stepAccuracy);\r\n            value = this._round(value + step, accuracy);\r\n            return value\r\n        }\r\n        return value + step\r\n    },\r\n    _round: function(value, precision) {\r\n        precision = precision || 0;\r\n        var multiplier = Math.pow(10, precision);\r\n        value *= multiplier;\r\n        value = Math.round(value) / multiplier;\r\n        return value\r\n    },\r\n    _renderValueChangeEvent: function() {\r\n        this.callBase();\r\n        eventsEngine.on(this._input(), \"focusout\", this._forceRefreshInputValue.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (\"number\" === this.option(\"mode\")) {\r\n            return\r\n        }\r\n        var $input = this._input(),\r\n            formattedValue = this._applyValueFormat(this.option(\"value\"));\r\n        $input.val(null);\r\n        $input.val(formattedValue)\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        var $input = this._input(),\r\n            inputValue = this._normalizeText(),\r\n            value = this._parseValue(inputValue),\r\n            valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\r\n        if (this._isValueValid() && !this._validateValue(value)) {\r\n            $input.val(this._applyValueFormat(value));\r\n            return\r\n        }\r\n        if (valueHasDigits) {\r\n            this.callBase(e, isNaN(value) ? null : value)\r\n        }\r\n        this._applyValueBoundaries(inputValue, value);\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        })\r\n    },\r\n    _applyValueBoundaries: function(inputValue, parsedValue) {\r\n        var isValueIncomplete = this._isValueIncomplete(inputValue),\r\n            isValueCorrect = this._isValueInRange(inputValue);\r\n        if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\r\n            if (Number(inputValue) !== parsedValue) {\r\n                this._input().val(this._applyValueFormat(parsedValue))\r\n            }\r\n        }\r\n    },\r\n    _replaceCommaWithPoint: function(value) {\r\n        return value.replace(\",\", \".\")\r\n    },\r\n    _inputIsInvalid: function() {\r\n        var isNumberMode = \"number\" === this.option(\"mode\");\r\n        var validityState = this._input().get(0).validity;\r\n        return isNumberMode && validityState && validityState.badInput\r\n    },\r\n    _renderDisplayText: function(text) {\r\n        if (this._inputIsInvalid()) {\r\n            return\r\n        }\r\n        this.callBase(text)\r\n    },\r\n    _isValueIncomplete: function(value) {\r\n        var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\r\n        return incompleteRegex.test(value)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _isNumber: function(value) {\r\n        return null !== this._parseValue(value)\r\n    },\r\n    _validateValue: function(value) {\r\n        var inputValue = this._normalizeText(),\r\n            isValueValid = this._isValueValid(),\r\n            isValid = true,\r\n            isNumber = this._isNumber(inputValue);\r\n        if (isNaN(Number(value))) {\r\n            isValid = false\r\n        }\r\n        if (!value && isValueValid) {\r\n            isValid = true\r\n        } else {\r\n            if (!isNumber && !isValueValid) {\r\n                isValid = false\r\n            }\r\n        }\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"invalidValueMessage\")\r\n            }\r\n        });\r\n        return isValid\r\n    },\r\n    _normalizeInputValue: function() {\r\n        return this._parseValue(this._normalizeText())\r\n    },\r\n    _normalizeText: function() {\r\n        var value = this._input().val().trim();\r\n        return this._replaceCommaWithPoint(value)\r\n    },\r\n    _parseValue: function(value) {\r\n        var number = parseFloat(value);\r\n        if (isNaN(number)) {\r\n            return null\r\n        }\r\n        return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    reset: function() {\r\n        this.option(\"value\", null)\r\n    },\r\n    _clean: function() {\r\n        delete this._$spinContainer;\r\n        delete this._$spinUp;\r\n        delete this._$spinDown;\r\n        this.callBase()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._validateValue(args.value);\r\n                this._setSubmitValue(args.value);\r\n                this.callBase(args);\r\n                this._resumeValueChangeAction();\r\n                break;\r\n            case \"step\":\r\n                this._renderProps();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._renderProps();\r\n                this.option(\"value\", this._parseValue(this.option(\"value\")));\r\n                break;\r\n            case \"showSpinButtons\":\r\n                this._renderInputAddons();\r\n                break;\r\n            case \"useLargeSpinButtons\":\r\n                this._toggleTouchFriendlyClass();\r\n                break;\r\n            case \"invalidValueMessage\":\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = NumberBoxBase;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.base.js\n// module id = 658\n// module chunks = 1 4 5 6 9","/**\r\n * DevExtreme (ui/number_box/number_box.spin.js)\r\n * Version: 18.2.5\r\n * Build date: Wed Jan 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    domAdapter = require(\"../../core/dom_adapter\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    Widget = require(\"../widget/ui.widget\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    eventUtils = require(\"../../events/utils\"),\r\n    pointerEvents = require(\"../../events/pointer\"),\r\n    feedbackEvents = require(\"../../events/core/emitter.feedback\"),\r\n    holdEvent = require(\"../../events/hold\"),\r\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\r\nvar SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_BUTTON_CLASS = \"dx-numberbox-spin-button\",\r\n    SPIN_HOLD_DELAY = 100,\r\n    NUMBER_BOX = \"dxNumberBox\",\r\n    POINTERUP_EVENT_NAME = eventUtils.addNamespace(pointerEvents.up, NUMBER_BOX),\r\n    POINTERCANCEL_EVENT_NAME = eventUtils.addNamespace(pointerEvents.cancel, NUMBER_BOX);\r\nvar SpinButton = Widget.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            direction: \"up\",\r\n            onChange: null,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true\r\n        })\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        var direction = SPIN_CLASS + \"-\" + this.option(\"direction\");\r\n        this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);\r\n        this._spinIcon = $(\"<div>\").addClass(direction + \"-icon\").appendTo(this.$element())\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME),\r\n            $element = this.$element();\r\n        eventsEngine.off($element, eventName);\r\n        eventsEngine.on($element, eventName, this._spinDownHandler.bind(this));\r\n        this._spinChangeHandler = this._createActionByOption(\"onChange\")\r\n    },\r\n    _spinDownHandler: function(e) {\r\n        e.preventDefault();\r\n        this._clearTimer();\r\n        eventsEngine.on(this.$element(), holdEvent.name, function() {\r\n            this._feedBackDeferred = new Deferred;\r\n            feedbackEvents.lock(this._feedBackDeferred);\r\n            this._spinChangeHandler({\r\n                event: e\r\n            });\r\n            this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {\r\n                event: e\r\n            })\r\n        }.bind(this));\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.on(document, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));\r\n        eventsEngine.on(document, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));\r\n        this._spinChangeHandler({\r\n            event: e\r\n        })\r\n    },\r\n    _dispose: function() {\r\n        this._clearTimer();\r\n        this.callBase()\r\n    },\r\n    _clearTimer: function() {\r\n        eventsEngine.off(this.$element(), holdEvent.name);\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.off(document, POINTERUP_EVENT_NAME);\r\n        eventsEngine.off(document, POINTERCANCEL_EVENT_NAME);\r\n        if (this._feedBackDeferred) {\r\n            this._feedBackDeferred.resolve()\r\n        }\r\n        if (this._holdTimer) {\r\n            clearInterval(this._holdTimer)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"onChange\":\r\n            case \"direction\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = SpinButton;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.spin.js\n// module id = 659\n// module chunks = 1 4 5 6 9","/*!\n * devextreme-react\n * Version: 18.2.5\n * Build date: Wed Jan 23 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar number_box_1 = require(\"devextreme/ui/number_box\");\nvar prop_types_1 = require(\"prop-types\");\nvar component_1 = require(\"./core/component\");\nvar nested_option_1 = require(\"./core/nested-option\");\nvar NumberBox = /** @class */ (function (_super) {\n    __extends(NumberBox, _super);\n    function NumberBox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._WidgetClass = number_box_1.default;\n        _this._defaults = {\n            defaultValue: \"value\"\n        };\n        _this._expectedChildren = {\n            format: { optionName: \"format\", isCollectionItem: false }\n        };\n        return _this;\n    }\n    Object.defineProperty(NumberBox.prototype, \"instance\", {\n        get: function () {\n            return this._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NumberBox;\n}(component_1.Component));\nexports.NumberBox = NumberBox;\nNumberBox.propTypes = {\n    accessKey: prop_types_1.PropTypes.string,\n    activeStateEnabled: prop_types_1.PropTypes.bool,\n    disabled: prop_types_1.PropTypes.bool,\n    elementAttr: prop_types_1.PropTypes.object,\n    focusStateEnabled: prop_types_1.PropTypes.bool,\n    format: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.object,\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.string\n    ]),\n    height: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ]),\n    hint: prop_types_1.PropTypes.string,\n    hoverStateEnabled: prop_types_1.PropTypes.bool,\n    inputAttr: prop_types_1.PropTypes.object,\n    invalidValueMessage: prop_types_1.PropTypes.string,\n    isValid: prop_types_1.PropTypes.bool,\n    max: prop_types_1.PropTypes.number,\n    min: prop_types_1.PropTypes.number,\n    mode: prop_types_1.PropTypes.oneOf([\n        \"number\",\n        \"text\",\n        \"tel\"\n    ]),\n    name: prop_types_1.PropTypes.string,\n    onChange: prop_types_1.PropTypes.func,\n    onContentReady: prop_types_1.PropTypes.func,\n    onCopy: prop_types_1.PropTypes.func,\n    onCut: prop_types_1.PropTypes.func,\n    onDisposing: prop_types_1.PropTypes.func,\n    onEnterKey: prop_types_1.PropTypes.func,\n    onFocusIn: prop_types_1.PropTypes.func,\n    onFocusOut: prop_types_1.PropTypes.func,\n    onInitialized: prop_types_1.PropTypes.func,\n    onInput: prop_types_1.PropTypes.func,\n    onKeyDown: prop_types_1.PropTypes.func,\n    onKeyPress: prop_types_1.PropTypes.func,\n    onKeyUp: prop_types_1.PropTypes.func,\n    onOptionChanged: prop_types_1.PropTypes.func,\n    onPaste: prop_types_1.PropTypes.func,\n    onValueChanged: prop_types_1.PropTypes.func,\n    placeholder: prop_types_1.PropTypes.string,\n    readOnly: prop_types_1.PropTypes.bool,\n    rtlEnabled: prop_types_1.PropTypes.bool,\n    showClearButton: prop_types_1.PropTypes.bool,\n    showSpinButtons: prop_types_1.PropTypes.bool,\n    step: prop_types_1.PropTypes.number,\n    stylingMode: prop_types_1.PropTypes.oneOf([\n        \"outlined\",\n        \"underlined\",\n        \"filled\"\n    ]),\n    tabIndex: prop_types_1.PropTypes.number,\n    text: prop_types_1.PropTypes.string,\n    useLargeSpinButtons: prop_types_1.PropTypes.bool,\n    validationError: prop_types_1.PropTypes.object,\n    validationMessageMode: prop_types_1.PropTypes.oneOf([\n        \"always\",\n        \"auto\"\n    ]),\n    value: prop_types_1.PropTypes.number,\n    valueChangeEvent: prop_types_1.PropTypes.string,\n    visible: prop_types_1.PropTypes.bool,\n    width: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ])\n};\n// tslint:disable:max-classes-per-file\n// owners:\n// NumberBox\nvar Format = /** @class */ (function (_super) {\n    __extends(Format, _super);\n    function Format() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Format.OptionName = \"format\";\n    return Format;\n}(nested_option_1.default));\nexports.Format = Format;\nexports.default = NumberBox;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme-react/number-box.js\n// module id = 865\n// module chunks = 9"],"sourceRoot":""}